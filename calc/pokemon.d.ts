import * as I from './data/interface';
import { StatsTable } from './stats';
export declare type Status = 'Healthy' | 'Paralyzed' | 'Poisoned' | 'Badly Poisoned' | 'Burned' | 'Asleep' | 'Frozen';
export declare class Pokemon {
    gen: I.Generation;
    name: string;
    species: I.Specie;
    type1: I.TypeName;
    type2?: I.TypeName;
    weight: number;
    level: number;
    gender?: I.GenderName;
    ability?: I.AbilityName;
    abilityOn?: boolean;
    isDynamaxed?: boolean;
    item?: I.ItemName;
    nature: I.NatureName;
    ivs: StatsTable;
    evs: StatsTable;
    boosts: StatsTable;
    rawStats: StatsTable;
    stats: StatsTable;
    curHP: number;
    status: Status;
    toxicCounter: number;
    moves: I.MoveName[];
    constructor(gen: I.Generation, name: string, options?: {
        level?: number;
        ability?: I.AbilityName;
        abilityOn?: boolean;
        isDynamaxed?: boolean;
        item?: I.ItemName;
        gender?: I.GenderName;
        nature?: I.NatureName;
        ivs?: Partial<StatsTable>;
        evs?: Partial<StatsTable>;
        boosts?: Partial<StatsTable>;
        curHP?: number;
        status?: Status;
        toxicCounter?: number;
        moves?: I.MoveName[];
        overrides?: Partial<I.Specie>;
    });
    maxHP(): number;
    hasAbility(...abilities: string[]): boolean | undefined;
    hasItem(...items: string[]): boolean | undefined;
    hasStatus(...statuses: Status[]): boolean;
    hasType(...types: I.TypeName[]): boolean;
    named(...names: string[]): boolean;
    clone(): Pokemon;
    private calcStat;
    static getForme(gen: I.Generation, speciesName: string, item?: I.ItemName, moveName?: I.MoveName): string;
    private static withDefault;
}
